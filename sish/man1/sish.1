.TH SISH 1 "19 December 2016" "version 1.0"

.SH NAME
.B sish \- a simple shell

.SH SYNOPSIS
.B sish
[\fB-x\fR]
[\fB-c\fR \fIcommand\fR]

.SH DESCRIPTION
.B sish
implements a very simple command-line interpreter or shell. It is suitable to be
used interactively or as a login shell. It only implements a very small subset
of what would usually be expected of a Unix shell, and does explicitly not lend
itself as a scripting language.

.SH OPTIONS
The following options are supported by \fBsish\fR:

.TP
\fB -c\fR \fI command\fR
Execute the given command.

.TP
.B -x
Enable tracing: Write each command to standard error, preceded by '+'.

.SH DETAILS
.B sish
allows for the execution of the given commands with a minimal amount of
niceties.

.PP
When
.B sish
is invoked and no commands are passed via the
.B -c
flag, it will print a simple prompt to stdout. It then reads commands from the
controlling terminal, executing them as one would expect.

.SS Lexical Structure
The shell reads  input in terms of lines and breaks it up into words at
whitespace (blanks and tabs), and at certain sequences of characters that are
special to the shell called "operators". There are two types of operators:
control operators and redirection operators:

.RS
Control operators:
.RS
& | <newline>
.RE
Redirection operators:
.RS
< > >>
.RE
.RE

.SS Redirection
.B sish
supports the following three input-/output- redirection operators:

.TP
>file
Redirect standard output to file. Mutually exclusive with the >> operator.

.TP
>>file
Append standard output to file. Mutually exclusive with the > operator.

.TP
<file
Redirect standard input from file.

.SS Pipelines
A pipeline is a sequence of one or more commands separated by the control
operator '|'. The standard output of all but the last command is connected to
the standard input of the next command. The standard output of the last command
is, absent any redirection operators, the controlling terminal.

.SS Background Commands -- &
If a command is terminated by the control operator ampersand (&), the shell
executes the command asynchronously -- that is, the shell does not wait for the
command to finish before prompting the user for the next command.

.SS Builtins
.B sish
supports the following builtins (which are taking precedence over any
non-builtin commands):

.TP
cd [\fIdir\fR]
Change the current working directory. If \fIdir\fR is not specified, change to
the user's home directory.

.TP
echo [\fIword\fR]
Print the given word, followed by a '\\n'. The following special values are supported:

.RS
.TP
$?
The exit status of the last command.

.TP
$$
The current process ID.
.RE

.TP
exit
Exit the current shell.

.SS Command Execution
If a sequence of words does not begin with a builtin,
.B sish
will attempt to execute it as a command, possibly utilizing the current PATH.

.SS Environment
.B sish
sets the following environment variables:

.TP
SHELL
the path of the executable of
.B sish

.SH EXAMPLES
The following sequence of commands shows common usage of \fBsish\fR:

.EX
$ sish
sish$ echo $$
6465
sish$ ls
file1 file2
sish$ ls | wc -l
    2
sish$ echo $?
0
sish$ find / >/dev/null &
sish$
sish$ aed -e <file >file.enc
sish$ cmd | sort | uniq -c | sort n
 121 foo
 304 bar
sish$ something
something: command not found
sish$ echo $?
127
sish$ rm /etc/passwd
rm: /etc/passwd: Permission denied
sish$ echo $?
1
sish$ exit
$ sish -c date
Sat Nov 29 21:18:07 EST 2014
$ sish -x
sish$ ls
+ ls
file1 file2
sish$ ls | wc -l
+ ls
+ wc -l
    2
sish$ cd /tmp
+ cd /tmp
sish$ pwd
+ pwd
/tmp
sish$ cd
+ cd
sish$ pwd
+ pwd
/home/jschauma
sish$ exit
+ exit
$
.EE

.SH EXIT STATUS
.B sish
returns the exit status of the last command it executed or a status of 127 if
the given command could not be executed for any reason.

.SH SEE ALSO
.BR bash(1),
.BR ksh(1),
.BR sh(1),
.BR execve(2),
.BR fork(2)

.SH HISTORY
Writing a simple shell has been a frequent assignment in many Unix programming
classes. This particular version was first assigned int he class
.I Advanced Programming in the UNIX Environment
at Stevens Institute of Technology by Jan Schaumann <jschauma@stevens.edu> in
the Fall of 2014.
